// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_lazyarray_RCPPEXPORTS_H_GEN_
#define RCPP_lazyarray_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace lazyarray {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("lazyarray", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("lazyarray", "_lazyarray_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in lazyarray");
            }
        }
    }

    inline Rcpp::DataFrame cpp_array_to_list(SEXP x, IntegerVector cutoff, int type = -1) {
        typedef SEXP(*Ptr_cpp_array_to_list)(SEXP,SEXP,SEXP);
        static Ptr_cpp_array_to_list p_cpp_array_to_list = NULL;
        if (p_cpp_array_to_list == NULL) {
            validateSignature("Rcpp::DataFrame(*cpp_array_to_list)(SEXP,IntegerVector,int)");
            p_cpp_array_to_list = (Ptr_cpp_array_to_list)R_GetCCallable("lazyarray", "_lazyarray_cpp_array_to_list");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_array_to_list(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(cutoff)), Shield<SEXP>(Rcpp::wrap(type)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::DataFrame >(rcpp_result_gen);
    }

    inline SEXP cpp_create_lazyarray(SEXP x, IntegerVector dim, SEXP fileName, SEXP compression, SEXP uniformEncoding) {
        typedef SEXP(*Ptr_cpp_create_lazyarray)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cpp_create_lazyarray p_cpp_create_lazyarray = NULL;
        if (p_cpp_create_lazyarray == NULL) {
            validateSignature("SEXP(*cpp_create_lazyarray)(SEXP,IntegerVector,SEXP,SEXP,SEXP)");
            p_cpp_create_lazyarray = (Ptr_cpp_create_lazyarray)R_GetCCallable("lazyarray", "_lazyarray_cpp_create_lazyarray");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_create_lazyarray(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(dim)), Shield<SEXP>(Rcpp::wrap(fileName)), Shield<SEXP>(Rcpp::wrap(compression)), Shield<SEXP>(Rcpp::wrap(uniformEncoding)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline IntegerVector cpp_index_to_index(IntegerVector& idx, List& locations, IntegerVector& parent_dim) {
        typedef SEXP(*Ptr_cpp_index_to_index)(SEXP,SEXP,SEXP);
        static Ptr_cpp_index_to_index p_cpp_index_to_index = NULL;
        if (p_cpp_index_to_index == NULL) {
            validateSignature("IntegerVector(*cpp_index_to_index)(IntegerVector&,List&,IntegerVector&)");
            p_cpp_index_to_index = (Ptr_cpp_index_to_index)R_GetCCallable("lazyarray", "_lazyarray_cpp_index_to_index");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_index_to_index(Shield<SEXP>(Rcpp::wrap(idx)), Shield<SEXP>(Rcpp::wrap(locations)), Shield<SEXP>(Rcpp::wrap(parent_dim)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

}

#endif // RCPP_lazyarray_RCPPEXPORTS_H_GEN_
