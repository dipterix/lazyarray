// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/lazyarray.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// setLazyBlockSize
R_xlen_t setLazyBlockSize(R_xlen_t size);
static SEXP _lazyarray_setLazyBlockSize_try(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< R_xlen_t >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(setLazyBlockSize(size));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_setLazyBlockSize(SEXP sizeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_setLazyBlockSize_try(sizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// getLazyBlockSize
R_xlen_t getLazyBlockSize();
static SEXP _lazyarray_getLazyBlockSize_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(getLazyBlockSize());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_getLazyBlockSize() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_getLazyBlockSize_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fstMeta
SEXP fstMeta(Rcpp::String fileName);
RcppExport SEXP _lazyarray_fstMeta(SEXP fileNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type fileName(fileNameSEXP);
    rcpp_result_gen = Rcpp::wrap(fstMeta(fileName));
    return rcpp_result_gen;
END_RCPP
}
// fstRetrieve
SEXP fstRetrieve(Rcpp::String fileName, SEXP colSel, SEXP start, SEXP end);
RcppExport SEXP _lazyarray_fstRetrieve(SEXP fileNameSEXP, SEXP colSelSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type colSel(colSelSEXP);
    Rcpp::traits::input_parameter< SEXP >::type start(startSEXP);
    Rcpp::traits::input_parameter< SEXP >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(fstRetrieve(fileName, colSel, start, end));
    return rcpp_result_gen;
END_RCPP
}
// fstStore
SEXP fstStore(Rcpp::String fileName, SEXP table, SEXP compression, SEXP uniformEncoding);
RcppExport SEXP _lazyarray_fstStore(SEXP fileNameSEXP, SEXP tableSEXP, SEXP compressionSEXP, SEXP uniformEncodingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type table(tableSEXP);
    Rcpp::traits::input_parameter< SEXP >::type compression(compressionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type uniformEncoding(uniformEncodingSEXP);
    rcpp_result_gen = Rcpp::wrap(fstStore(fileName, table, compression, uniformEncoding));
    return rcpp_result_gen;
END_RCPP
}
// checkFstMeta
bool checkFstMeta(const Rcpp::String file, const int64_t expect_nrows, Rcpp::StringVector cnames);
RcppExport SEXP _lazyarray_checkFstMeta(SEXP fileSEXP, SEXP expect_nrowsSEXP, SEXP cnamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::String >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const int64_t >::type expect_nrows(expect_nrowsSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type cnames(cnamesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkFstMeta(file, expect_nrows, cnames));
    return rcpp_result_gen;
END_RCPP
}
// loc2idx3
std::vector<int64_t> loc2idx3(SEXP locations, std::vector<int64_t>& parent_dim);
static SEXP _lazyarray_loc2idx3_try(SEXP locationsSEXP, SEXP parent_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type locations(locationsSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t>& >::type parent_dim(parent_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(loc2idx3(locations, parent_dim));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_loc2idx3(SEXP locationsSEXP, SEXP parent_dimSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_loc2idx3_try(locationsSEXP, parent_dimSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// extractSlices
Rcpp::List extractSlices(SEXP listOrEnv, const R_xlen_t& ndims);
static SEXP _lazyarray_extractSlices_try(SEXP listOrEnvSEXP, SEXP ndimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type listOrEnv(listOrEnvSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t& >::type ndims(ndimsSEXP);
    rcpp_result_gen = Rcpp::wrap(extractSlices(listOrEnv, ndims));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_extractSlices(SEXP listOrEnvSEXP, SEXP ndimsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_extractSlices_try(listOrEnvSEXP, ndimsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// parseSlices
Rcpp::List parseSlices(SEXP listOrEnv, Rcpp::NumericVector dim, bool pos_subscript);
static SEXP _lazyarray_parseSlices_try(SEXP listOrEnvSEXP, SEXP dimSEXP, SEXP pos_subscriptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type listOrEnv(listOrEnvSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type pos_subscript(pos_subscriptSEXP);
    rcpp_result_gen = Rcpp::wrap(parseSlices(listOrEnv, dim, pos_subscript));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_parseSlices(SEXP listOrEnvSEXP, SEXP dimSEXP, SEXP pos_subscriptSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_parseSlices_try(listOrEnvSEXP, dimSEXP, pos_subscriptSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// parseAndScheduleBlocks
Rcpp::List parseAndScheduleBlocks(SEXP sliceIdx, Rcpp::NumericVector dim, bool forceSchedule);
static SEXP _lazyarray_parseAndScheduleBlocks_try(SEXP sliceIdxSEXP, SEXP dimSEXP, SEXP forceScheduleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type sliceIdx(sliceIdxSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type forceSchedule(forceScheduleSEXP);
    rcpp_result_gen = Rcpp::wrap(parseAndScheduleBlocks(sliceIdx, dim, forceSchedule));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_parseAndScheduleBlocks(SEXP sliceIdxSEXP, SEXP dimSEXP, SEXP forceScheduleSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_parseAndScheduleBlocks_try(sliceIdxSEXP, dimSEXP, forceScheduleSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// reshapeOrDrop
SEXP reshapeOrDrop(SEXP x, SEXP reshape, bool drop);
static SEXP _lazyarray_reshapeOrDrop_try(SEXP xSEXP, SEXP reshapeSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type reshape(reshapeSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(reshapeOrDrop(x, reshape, drop));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_reshapeOrDrop(SEXP xSEXP, SEXP reshapeSEXP, SEXP dropSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_reshapeOrDrop_try(xSEXP, reshapeSEXP, dropSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_create_lazyarray
SEXP cpp_create_lazyarray(SEXP& x, IntegerVector& dim, SEXP fileName, SEXP compression, SEXP uniformEncoding);
RcppExport SEXP _lazyarray_cpp_create_lazyarray(SEXP xSEXP, SEXP dimSEXP, SEXP fileNameSEXP, SEXP compressionSEXP, SEXP uniformEncodingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type compression(compressionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type uniformEncoding(uniformEncodingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_create_lazyarray(x, dim, fileName, compression, uniformEncoding));
    return rcpp_result_gen;
END_RCPP
}
// lazyMapReduceByPartition
SEXP lazyMapReduceByPartition(Rcpp::String fileName, CharacterVector colSel, SEXP start, SEXP end, Rcpp::Nullable<Rcpp::Function> custom_func, Rcpp::Nullable<IntegerVector> reshape);
RcppExport SEXP _lazyarray_lazyMapReduceByPartition(SEXP fileNameSEXP, SEXP colSelSEXP, SEXP startSEXP, SEXP endSEXP, SEXP custom_funcSEXP, SEXP reshapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type colSel(colSelSEXP);
    Rcpp::traits::input_parameter< SEXP >::type start(startSEXP);
    Rcpp::traits::input_parameter< SEXP >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::Function> >::type custom_func(custom_funcSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<IntegerVector> >::type reshape(reshapeSEXP);
    rcpp_result_gen = Rcpp::wrap(lazyMapReduceByPartition(fileName, colSel, start, end, custom_func, reshape));
    return rcpp_result_gen;
END_RCPP
}
// lazyLoadOld
SEXP lazyLoadOld(Rcpp::StringVector& files, Rcpp::List& partition_locations, Rcpp::IntegerVector& partition_dim, R_xlen_t ndim, SEXP value_type);
RcppExport SEXP _lazyarray_lazyLoadOld(SEXP filesSEXP, SEXP partition_locationsSEXP, SEXP partition_dimSEXP, SEXP ndimSEXP, SEXP value_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector& >::type files(filesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type partition_locations(partition_locationsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type partition_dim(partition_dimSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value_type(value_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(lazyLoadOld(files, partition_locations, partition_dim, ndim, value_type));
    return rcpp_result_gen;
END_RCPP
}
// subsetFSTBare
SEXP subsetFSTBare(const std::string& rootPath, const Rcpp::List& subparsed, const Rcpp::NumericVector& dim, const SEXPTYPE& dtype);
static SEXP _lazyarray_subsetFSTBare_try(SEXP rootPathSEXP, SEXP subparsedSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type rootPath(rootPathSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type subparsed(subparsedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const SEXPTYPE& >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetFSTBare(rootPath, subparsed, dim, dtype));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_subsetFSTBare(SEXP rootPathSEXP, SEXP subparsedSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_subsetFSTBare_try(rootPathSEXP, subparsedSEXP, dimSEXP, dtypeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// subsetFST
SEXP subsetFST(const std::string& rootPath, SEXP listOrEnv, const Rcpp::NumericVector& dim, SEXPTYPE dtype, SEXP reshape, bool drop);
static SEXP _lazyarray_subsetFST_try(SEXP rootPathSEXP, SEXP listOrEnvSEXP, SEXP dimSEXP, SEXP dtypeSEXP, SEXP reshapeSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type rootPath(rootPathSEXP);
    Rcpp::traits::input_parameter< SEXP >::type listOrEnv(listOrEnvSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< SEXPTYPE >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type reshape(reshapeSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetFST(rootPath, listOrEnv, dim, dtype, reshape, drop));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_subsetFST(SEXP rootPathSEXP, SEXP listOrEnvSEXP, SEXP dimSEXP, SEXP dtypeSEXP, SEXP reshapeSEXP, SEXP dropSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_subsetFST_try(rootPathSEXP, listOrEnvSEXP, dimSEXP, dtypeSEXP, reshapeSEXP, dropSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// getLazyThread
int getLazyThread(bool max);
static SEXP _lazyarray_getLazyThread_try(SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< bool >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(getLazyThread(max));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_getLazyThread(SEXP maxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_getLazyThread_try(maxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// setLazyThread
int setLazyThread(int n, SEXP reset_after_fork);
static SEXP _lazyarray_setLazyThread_try(SEXP nSEXP, SEXP reset_after_forkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< SEXP >::type reset_after_fork(reset_after_forkSEXP);
    rcpp_result_gen = Rcpp::wrap(setLazyThread(n, reset_after_fork));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_setLazyThread(SEXP nSEXP, SEXP reset_after_forkSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_setLazyThread_try(nSEXP, reset_after_forkSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// hasOpenMP
bool hasOpenMP();
static SEXP _lazyarray_hasOpenMP_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(hasOpenMP());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_hasOpenMP() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_hasOpenMP_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// timesTwo
std::string timesTwo(int64_t input);
RcppExport SEXP _lazyarray_timesTwo(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(input));
    return rcpp_result_gen;
END_RCPP
}
// subsetAssignFST
SEXP subsetAssignFST(const SEXP values, const std::string& file, SEXP listOrEnv, const Rcpp::NumericVector& dim, const SEXPTYPE& dtype, int compression, bool uniformEncoding);
static SEXP _lazyarray_subsetAssignFST_try(SEXP valuesSEXP, SEXP fileSEXP, SEXP listOrEnvSEXP, SEXP dimSEXP, SEXP dtypeSEXP, SEXP compressionSEXP, SEXP uniformEncodingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< SEXP >::type listOrEnv(listOrEnvSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const SEXPTYPE& >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< int >::type compression(compressionSEXP);
    Rcpp::traits::input_parameter< bool >::type uniformEncoding(uniformEncodingSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetAssignFST(values, file, listOrEnv, dim, dtype, compression, uniformEncoding));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_subsetAssignFST(SEXP valuesSEXP, SEXP fileSEXP, SEXP listOrEnvSEXP, SEXP dimSEXP, SEXP dtypeSEXP, SEXP compressionSEXP, SEXP uniformEncodingSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_subsetAssignFST_try(valuesSEXP, fileSEXP, listOrEnvSEXP, dimSEXP, dtypeSEXP, compressionSEXP, uniformEncodingSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dropDimension
SEXP dropDimension(SEXP x);
static SEXP _lazyarray_dropDimension_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(dropDimension(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_dropDimension(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_dropDimension_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// prod2
int64_t prod2(SEXP x, bool na_rm);
static SEXP _lazyarray_prod2_try(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(prod2(x, na_rm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_prod2(SEXP xSEXP, SEXP na_rmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_prod2_try(xSEXP, na_rmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// parseDots
SEXP parseDots(Rcpp::Environment& env, bool eval);
static SEXP _lazyarray_parseDots_try(SEXP envSEXP, SEXP evalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment& >::type env(envSEXP);
    Rcpp::traits::input_parameter< bool >::type eval(evalSEXP);
    rcpp_result_gen = Rcpp::wrap(parseDots(env, eval));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_parseDots(SEXP envSEXP, SEXP evalSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_parseDots_try(envSEXP, evalSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// stopIfNot
bool stopIfNot(const bool isValid, const std::string& message, bool stopIfError);
static SEXP _lazyarray_stopIfNot_try(SEXP isValidSEXP, SEXP messageSEXP, SEXP stopIfErrorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const bool >::type isValid(isValidSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type message(messageSEXP);
    Rcpp::traits::input_parameter< bool >::type stopIfError(stopIfErrorSEXP);
    rcpp_result_gen = Rcpp::wrap(stopIfNot(isValid, message, stopIfError));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_stopIfNot(SEXP isValidSEXP, SEXP messageSEXP, SEXP stopIfErrorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_stopIfNot_try(isValidSEXP, messageSEXP, stopIfErrorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// getSexpType
SEXPTYPE getSexpType(SEXP x);
static SEXP _lazyarray_getSexpType_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getSexpType(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_getSexpType(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_getSexpType_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tik
SEXP tik();
static SEXP _lazyarray_tik_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(tik());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_tik() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_tik_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tok
SEXP tok(std::string msg, bool stop);
static SEXP _lazyarray_tok_try(SEXP msgSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type msg(msgSEXP);
    Rcpp::traits::input_parameter< bool >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(tok(msg, stop));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_tok(SEXP msgSEXP, SEXP stopSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_tok_try(msgSEXP, stopSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// subsetAssignVector
SEXP subsetAssignVector(SEXP x, int64_t start, SEXP value);
static SEXP _lazyarray_subsetAssignVector_try(SEXP xSEXP, SEXP startSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetAssignVector(x, start, value));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lazyarray_subsetAssignVector(SEXP xSEXP, SEXP startSEXP, SEXP valueSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lazyarray_subsetAssignVector_try(xSEXP, startSEXP, valueSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _lazyarray_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("R_xlen_t(*setLazyBlockSize)(R_xlen_t)");
        signatures.insert("R_xlen_t(*getLazyBlockSize)()");
        signatures.insert("std::vector<int64_t>(*loc2idx3)(SEXP,std::vector<int64_t>&)");
        signatures.insert("Rcpp::List(*extractSlices)(SEXP,const R_xlen_t&)");
        signatures.insert("Rcpp::List(*parseSlices)(SEXP,Rcpp::NumericVector,bool)");
        signatures.insert("Rcpp::List(*parseAndScheduleBlocks)(SEXP,Rcpp::NumericVector,bool)");
        signatures.insert("SEXP(*reshapeOrDrop)(SEXP,SEXP,bool)");
        signatures.insert("SEXP(*subsetFSTBare)(const std::string&,const Rcpp::List&,const Rcpp::NumericVector&,const SEXPTYPE&)");
        signatures.insert("SEXP(*subsetFST)(const std::string&,SEXP,const Rcpp::NumericVector&,SEXPTYPE,SEXP,bool)");
        signatures.insert("int(*getLazyThread)(bool)");
        signatures.insert("int(*setLazyThread)(int,SEXP)");
        signatures.insert("bool(*hasOpenMP)()");
        signatures.insert("SEXP(*subsetAssignFST)(const SEXP,const std::string&,SEXP,const Rcpp::NumericVector&,const SEXPTYPE&,int,bool)");
        signatures.insert("SEXP(*dropDimension)(SEXP)");
        signatures.insert("int64_t(*prod2)(SEXP,bool)");
        signatures.insert("SEXP(*parseDots)(Rcpp::Environment&,bool)");
        signatures.insert("bool(*stopIfNot)(const bool,const std::string&,bool)");
        signatures.insert("SEXPTYPE(*getSexpType)(SEXP)");
        signatures.insert("SEXP(*tik)()");
        signatures.insert("SEXP(*tok)(std::string,bool)");
        signatures.insert("SEXP(*subsetAssignVector)(SEXP,int64_t,SEXP)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _lazyarray_RcppExport_registerCCallable() { 
    R_RegisterCCallable("lazyarray", "_lazyarray_setLazyBlockSize", (DL_FUNC)_lazyarray_setLazyBlockSize_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_getLazyBlockSize", (DL_FUNC)_lazyarray_getLazyBlockSize_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_loc2idx3", (DL_FUNC)_lazyarray_loc2idx3_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_extractSlices", (DL_FUNC)_lazyarray_extractSlices_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_parseSlices", (DL_FUNC)_lazyarray_parseSlices_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_parseAndScheduleBlocks", (DL_FUNC)_lazyarray_parseAndScheduleBlocks_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_reshapeOrDrop", (DL_FUNC)_lazyarray_reshapeOrDrop_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_subsetFSTBare", (DL_FUNC)_lazyarray_subsetFSTBare_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_subsetFST", (DL_FUNC)_lazyarray_subsetFST_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_getLazyThread", (DL_FUNC)_lazyarray_getLazyThread_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_setLazyThread", (DL_FUNC)_lazyarray_setLazyThread_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_hasOpenMP", (DL_FUNC)_lazyarray_hasOpenMP_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_subsetAssignFST", (DL_FUNC)_lazyarray_subsetAssignFST_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_dropDimension", (DL_FUNC)_lazyarray_dropDimension_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_prod2", (DL_FUNC)_lazyarray_prod2_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_parseDots", (DL_FUNC)_lazyarray_parseDots_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_stopIfNot", (DL_FUNC)_lazyarray_stopIfNot_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_getSexpType", (DL_FUNC)_lazyarray_getSexpType_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_tik", (DL_FUNC)_lazyarray_tik_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_tok", (DL_FUNC)_lazyarray_tok_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_subsetAssignVector", (DL_FUNC)_lazyarray_subsetAssignVector_try);
    R_RegisterCCallable("lazyarray", "_lazyarray_RcppExport_validate", (DL_FUNC)_lazyarray_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_lazyarray_setLazyBlockSize", (DL_FUNC) &_lazyarray_setLazyBlockSize, 1},
    {"_lazyarray_getLazyBlockSize", (DL_FUNC) &_lazyarray_getLazyBlockSize, 0},
    {"_lazyarray_fstMeta", (DL_FUNC) &_lazyarray_fstMeta, 1},
    {"_lazyarray_fstRetrieve", (DL_FUNC) &_lazyarray_fstRetrieve, 4},
    {"_lazyarray_fstStore", (DL_FUNC) &_lazyarray_fstStore, 4},
    {"_lazyarray_checkFstMeta", (DL_FUNC) &_lazyarray_checkFstMeta, 3},
    {"_lazyarray_loc2idx3", (DL_FUNC) &_lazyarray_loc2idx3, 2},
    {"_lazyarray_extractSlices", (DL_FUNC) &_lazyarray_extractSlices, 2},
    {"_lazyarray_parseSlices", (DL_FUNC) &_lazyarray_parseSlices, 3},
    {"_lazyarray_parseAndScheduleBlocks", (DL_FUNC) &_lazyarray_parseAndScheduleBlocks, 3},
    {"_lazyarray_reshapeOrDrop", (DL_FUNC) &_lazyarray_reshapeOrDrop, 3},
    {"_lazyarray_cpp_create_lazyarray", (DL_FUNC) &_lazyarray_cpp_create_lazyarray, 5},
    {"_lazyarray_lazyMapReduceByPartition", (DL_FUNC) &_lazyarray_lazyMapReduceByPartition, 6},
    {"_lazyarray_lazyLoadOld", (DL_FUNC) &_lazyarray_lazyLoadOld, 5},
    {"_lazyarray_subsetFSTBare", (DL_FUNC) &_lazyarray_subsetFSTBare, 4},
    {"_lazyarray_subsetFST", (DL_FUNC) &_lazyarray_subsetFST, 6},
    {"_lazyarray_getLazyThread", (DL_FUNC) &_lazyarray_getLazyThread, 1},
    {"_lazyarray_setLazyThread", (DL_FUNC) &_lazyarray_setLazyThread, 2},
    {"_lazyarray_hasOpenMP", (DL_FUNC) &_lazyarray_hasOpenMP, 0},
    {"_lazyarray_timesTwo", (DL_FUNC) &_lazyarray_timesTwo, 1},
    {"_lazyarray_subsetAssignFST", (DL_FUNC) &_lazyarray_subsetAssignFST, 7},
    {"_lazyarray_dropDimension", (DL_FUNC) &_lazyarray_dropDimension, 1},
    {"_lazyarray_prod2", (DL_FUNC) &_lazyarray_prod2, 2},
    {"_lazyarray_parseDots", (DL_FUNC) &_lazyarray_parseDots, 2},
    {"_lazyarray_stopIfNot", (DL_FUNC) &_lazyarray_stopIfNot, 3},
    {"_lazyarray_getSexpType", (DL_FUNC) &_lazyarray_getSexpType, 1},
    {"_lazyarray_tik", (DL_FUNC) &_lazyarray_tik, 0},
    {"_lazyarray_tok", (DL_FUNC) &_lazyarray_tok, 2},
    {"_lazyarray_subsetAssignVector", (DL_FUNC) &_lazyarray_subsetAssignVector, 3},
    {"_lazyarray_RcppExport_registerCCallable", (DL_FUNC) &_lazyarray_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

int detectForked(DllInfo *dll);
RcppExport void R_init_lazyarray(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    detectForked(dll);
}
