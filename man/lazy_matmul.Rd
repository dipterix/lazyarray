% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s3-lazymatrix.R
\name{lazy_matmul}
\alias{lazy_matmul}
\title{Matrix multiplication}
\usage{
lazy_matmul(x, y, max_chunks, weights = NULL, hybrid_limit = 2)
}
\arguments{
\item{x, y}{\code{LazyMatrix} or anything that can be 
transformed into \code{LazyMatrix}}

\item{max_chunks}{max number of chunks to split the data}

\item{weights}{weights while perform \code{x \%*\% y}. If not \code{NULL},
the results will be \code{x \%*\% diag(weights) \%*\% y}}

\item{hybrid_limit}{measured in gigabytes. If the estimated memory usage
does not exceed \code{hybrid_limit}, then perform naive multiplication, 
i.e. \code{x[] \%*\% y[]} in-memory}
}
\value{
Depends on whether \code{hybrid_limit} is reached. If hybrid limit
is not reached, i.e. multiplication in-memory, then returns a matrix. 
Otherwise return a \code{LazyMatrix}.
}
\description{
Matrix multiplication
}
\details{
Depending on whether \code{x} or \code{y} is transposed, the 
performance varies a lot under "lazy" mode. \code{lazy_matmul} is optimized
for partition-major \code{LazyMatrix} instances. For example, if \code{m}
is a \code{n-by-p} matrix with \code{n < p}, it's highly recommended to 
create lazy version of matrices by \code{t(as.lazyarray(t(m)))} or 
\code{as.lazymatrix(m)}
}
\examples{

x <- matrix(1:16,4)
y <- as.lazymatrix(x)
all(lazy_matmul(x, x) == x\%*\%x)

# In-memory calculation (x < 2GB)
lazy_matmul(y, y)

# Lazy mode (slow but larger memory capacity)
re <- lazy_matmul(y, y, hybrid_limit = 0)
re

all(re[] == x\%*\%x)

\dontrun{
# ------------ Lazy-mode performance comparison (slow example) ------------
a <- matrix(1:100000, 25)

# 4000 partitions, slow
row_major <- as.lazyarray(a)

# 25 partitions, fast
col_major <- as.lazyarray(t(a))

# 1. x (25 partitions), y (25 partitions)
x <- t(as.lazymatrix(col_major))
y <- as.lazymatrix(col_major)
system.time(lazy_matmul(x, y, hybrid_limit = 0))

# 2. x (4000 partitions), y (25 partitions)
x <- as.lazymatrix(row_major)
y <- as.lazymatrix(col_major)
system.time(lazy_matmul(x, y, hybrid_limit = 0))

# 3. x (4000 partitions), y (4000 partitions)
x <- as.lazymatrix(row_major)
y <- t(as.lazymatrix(row_major))
system.time(lazy_matmul(x, y, hybrid_limit = 0))


# 3. x (25 partitions), y (4000 partitions)
x <- t(as.lazymatrix(col_major))
y <- t(as.lazymatrix(row_major))
system.time(lazy_matmul(x, y, hybrid_limit = 0))

}

}
